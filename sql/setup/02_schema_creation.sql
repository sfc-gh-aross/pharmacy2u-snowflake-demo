-- ============================================================================
-- Pharmacy2U Demo - Schema Creation
-- Purpose: Create schemas and table structures for medallion architecture
-- ============================================================================

USE ROLE ACCOUNTADMIN;
USE WAREHOUSE PHARMACY2U_DEMO_WH;

-- ============================================================================
-- BRONZE LAYER - Raw Data Tables
-- ============================================================================

USE DATABASE PHARMACY2U_BRONZE;
USE SCHEMA RAW_DATA;

-- Raw prescriptions table from SQL Server
CREATE TABLE IF NOT EXISTS RAW_PRESCRIPTIONS (
    PRESCRIPTION_ID VARCHAR(50),
    PATIENT_ID VARCHAR(50),
    DRUG_CODE VARCHAR(20),
    DRUG_NAME VARCHAR(200),
    QUANTITY NUMBER(10,2),
    DAYS_SUPPLY NUMBER(5),
    PRESCRIPTION_DATE DATE,
    PRESCRIBER_ID VARCHAR(50),
    PHARMACY_ID VARCHAR(20),
    COST_GBP NUMBER(10,2),
    INGESTION_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    SOURCE_SYSTEM VARCHAR(50) DEFAULT 'SQL_SERVER'
);

COMMENT ON TABLE RAW_PRESCRIPTIONS IS 'Raw prescription data ingested from SQL Server';

-- Raw patients table from PostgreSQL
CREATE TABLE IF NOT EXISTS RAW_PATIENTS (
    PATIENT_ID VARCHAR(50),
    FIRST_NAME VARCHAR(100),
    LAST_NAME VARCHAR(100),
    DATE_OF_BIRTH DATE,
    GENDER VARCHAR(20),
    NHS_NUMBER VARCHAR(20),
    POSTCODE VARCHAR(10),
    EMAIL VARCHAR(200),
    PHONE VARCHAR(30),
    REGISTRATION_DATE DATE,
    INGESTION_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    SOURCE_SYSTEM VARCHAR(50) DEFAULT 'POSTGRESQL'
);

COMMENT ON TABLE RAW_PATIENTS IS 'Raw patient data ingested from PostgreSQL acquisition';

-- Raw marketing events table (JSON from ADLS Gen2)
CREATE TABLE IF NOT EXISTS RAW_MARKETING_EVENTS (
    EVENT_DATA VARIANT,
    INGESTION_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    SOURCE_SYSTEM VARCHAR(50) DEFAULT 'ADLS_GEN2'
);

COMMENT ON TABLE RAW_MARKETING_EVENTS IS 'Raw marketing events in JSON format from ADLS Gen2';

-- ============================================================================
-- SILVER LAYER - Cleaned and Governed Tables
-- ============================================================================

USE DATABASE PHARMACY2U_SILVER;
USE SCHEMA GOVERNED_DATA;

-- Cleaned prescriptions table
CREATE TABLE IF NOT EXISTS PRESCRIPTIONS (
    PRESCRIPTION_ID VARCHAR(50),
    PATIENT_ID VARCHAR(50) NOT NULL,
    DRUG_CODE VARCHAR(20),
    DRUG_NAME VARCHAR(200),
    QUANTITY NUMBER(10,2),
    DAYS_SUPPLY NUMBER(5),
    PRESCRIPTION_DATE DATE NOT NULL,
    PRESCRIBER_ID VARCHAR(50),
    PHARMACY_ID VARCHAR(20),
    COST_GBP NUMBER(10,2),
    PROCESSED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    CONSTRAINT PK_PRESCRIPTIONS PRIMARY KEY (PRESCRIPTION_ID)
);

COMMENT ON TABLE PRESCRIPTIONS IS 'Cleaned and validated prescription data';

-- Cleaned patients table
CREATE TABLE IF NOT EXISTS PATIENTS (
    PATIENT_ID VARCHAR(50),
    FIRST_NAME VARCHAR(100),
    LAST_NAME VARCHAR(100),
    DATE_OF_BIRTH DATE,
    AGE NUMBER(3),
    GENDER VARCHAR(20),
    NHS_NUMBER VARCHAR(20),
    POSTCODE VARCHAR(10),
    EMAIL VARCHAR(200),
    PHONE VARCHAR(30),
    REGISTRATION_DATE DATE,
    PROCESSED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    CONSTRAINT PK_PATIENTS PRIMARY KEY (PATIENT_ID)
);

COMMENT ON TABLE PATIENTS IS 'Cleaned and validated patient data with PII governance applied';

-- Marketing events table (flattened from JSON)
CREATE TABLE IF NOT EXISTS MARKETING_EVENTS (
    EVENT_ID VARCHAR(50),
    PATIENT_ID VARCHAR(50),
    CAMPAIGN_ID VARCHAR(50),
    CAMPAIGN_NAME VARCHAR(200),
    EVENT_TYPE VARCHAR(50),
    EVENT_TIMESTAMP TIMESTAMP_NTZ,
    CHANNEL VARCHAR(50),
    CONVERSION_FLAG BOOLEAN,
    PROCESSED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    CONSTRAINT PK_MARKETING_EVENTS PRIMARY KEY (EVENT_ID)
);

COMMENT ON TABLE MARKETING_EVENTS IS 'Flattened marketing events from JSON sources';

-- ============================================================================
-- GOLD LAYER - Analytics-Ready Views
-- ============================================================================

USE DATABASE PHARMACY2U_GOLD;
USE SCHEMA ANALYTICS;

-- Patient 360 view combining all data sources
CREATE OR REPLACE VIEW V_PATIENT_360 AS
SELECT 
    p.PATIENT_ID,
    p.FIRST_NAME,
    p.LAST_NAME,
    p.DATE_OF_BIRTH,
    p.AGE,
    p.GENDER,
    p.NHS_NUMBER,
    p.POSTCODE,
    p.EMAIL,
    p.PHONE,
    p.REGISTRATION_DATE,
    COUNT(DISTINCT rx.PRESCRIPTION_ID) AS TOTAL_PRESCRIPTIONS,
    COUNT(DISTINCT rx.DRUG_CODE) AS UNIQUE_DRUGS,
    SUM(rx.COST_GBP) AS LIFETIME_VALUE_GBP,
    MAX(rx.PRESCRIPTION_DATE) AS LAST_PRESCRIPTION_DATE,
    COUNT(DISTINCT me.EVENT_ID) AS MARKETING_INTERACTIONS,
    SUM(CASE WHEN me.CONVERSION_FLAG = TRUE THEN 1 ELSE 0 END) AS CAMPAIGN_CONVERSIONS
FROM PHARMACY2U_SILVER.GOVERNED_DATA.PATIENTS p
LEFT JOIN PHARMACY2U_SILVER.GOVERNED_DATA.PRESCRIPTIONS rx 
    ON p.PATIENT_ID = rx.PATIENT_ID
LEFT JOIN PHARMACY2U_SILVER.GOVERNED_DATA.MARKETING_EVENTS me 
    ON p.PATIENT_ID = me.PATIENT_ID
GROUP BY 
    p.PATIENT_ID, p.FIRST_NAME, p.LAST_NAME, p.DATE_OF_BIRTH, 
    p.AGE, p.GENDER, p.NHS_NUMBER, p.POSTCODE, p.EMAIL, 
    p.PHONE, p.REGISTRATION_DATE;

COMMENT ON VIEW V_PATIENT_360 IS 'Comprehensive Patient 360 view for analytics and ML';

SELECT 'Schema creation completed successfully' AS STATUS;
